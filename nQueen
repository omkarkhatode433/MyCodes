
public class nQueen {
	
	public static boolean isSafe(char board[][],int i,int j) {
		int n=board.length;
		for(int k=0;k<n;k++) {
			if(k==j)
				continue;
			if(board[i][k]=='Q') {
				return false;
			}
		}
		for(int k=0;k<n;k++) {
			if(k==i)
				continue;
			if(board[k][j]=='Q') {
				return false;
			}
			
		}
		for(int k=j, m=i;k<n&&m<n;k++,m++) {
			if(k==j&&m==i)
				continue;
			if(board[m][k]=='Q') {
				return false;
			}
		}
		for(int k=j, m=i;k>=0&&m>=0;k--,m--) {
			if(k==j&&m==i)
				continue;
			if(board[m][k]=='Q') {
				return false;
			}
		}
		for(int k=j, m=i;k<n&&m>=0;k++,m--) {
			if(k==j&&m==i)
				continue;
			if(board[m][k]=='Q') {
				return false;
			}
		}
		for(int k=j, m=i;m<n&&k>=0;k--,m++) {
			if(k==j&&m==i)
				continue;
			if(board[m][k]=='Q') {
				return false;
			}
		}
		
		return true;
		
	}
	
	public static boolean place(char[][] board,int i,int j) {
		int n=board.length;
		
			if (i >= board.length)
				return true;

			for (int z = 0; z < n; z++) {
				
				if (isSafe(board, i, z)) {
					
					board[i][z] = 'Q';
					print(board);

					if (place(board, i + 1,0) == true)
						return true;

					board[i][z] = '.'; 
				}
			}
			
			return false;
			
		}
	
	public static void solve(char[][] board) {
		
		place(board,0,0);
		
	}
		
	
	public static void main(String[] args) {
		int n=4;
		 char[][] board=new char[n][n];
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				board[i][j]='.';
			}
		}
		solve(board);
		print(board);
	}

	public static void print(char[][] board) {
		
		int n=board.length;
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				System.out.print(" "+board[i][j]+" ");
			}
			System.out.println();
		}
		
		System.out.println("--------------------------");
	}

}
